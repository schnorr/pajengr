#+TITLE: Maintenance ORG file for pajengr package
#+AUTHOR: Lucas Mello Schnorr
#+STARTUP: overview indent
#+TAGS: noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

The package has been created with Rcpp's version of =package.skeleton=,
by running the following code. This is no longer necessary because the
package has already been created and modified. The contents of the
pajengr directory created by the =Rcpp.package.skeleton= have been
copied to the root directory of this repository.

#+begin_src R :results output :session :exports both
library(Rcpp);
Rcpp.package.skeleton("pajengr");
#+end_src

#+RESULTS:
#+begin_example
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Saving functions and data ...
Making help files ...
Done.
Further steps are described in './pajengr/Read-and-delete-me'.

Adding Rcpp settings
 >> added Imports: Rcpp
 >> added LinkingTo: Rcpp
 >> added useDynLib directive to NAMESPACE
 >> added importFrom(Rcpp, evalCpp) directive to NAMESPACE
 >> added example src file using Rcpp attributes
 >> added Rd file for rcpp_hello_world
 >> compiled Rcpp attributes
#+end_example

Every time some new function is exported, we need to recompile the
attributes in the following way, so our R API gets updated.

#+begin_src R :results output :session :exports both
library(Rcpp);
unlink("src/RcppExports.cpp")
compileAttributes(".");
#+end_src

#+RESULTS:

The package can be checked and installed the following way (for
development purposes only). Please note that the standard installation
procedure [[./README.org][has already been described in the README file]]. Note that the
following commands should be executed considering the existence of a
=pajengr= directory with the contents of this repository. If you are
within the aforementioned directory, replace pajengr by the dot.

#+begin_src shell :results output
#R CMD check .
R CMD INSTALL .
#+end_src

#+RESULTS:

Contents of the REad-and-delete-me file:

#+BEGIN_EXAMPLE
- Edit the help file skeletons in 'man', possibly combining help files for multiple functions.
- Edit the exports in 'NAMESPACE', and add necessary imports.
- Put any C/C++/Fortran code in 'src'.
- If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.
- Run R CMD build to build the package tarball.
- Run R CMD check to check the package tarball.
#+END_EXAMPLE

And then, test to verify if the installation is working.

#+begin_src R :results output :session :exports both
library(pajengr)
suppressMessages(library(tidyverse))
library(profvis)
profvis({
    pajeng_read("../pajeng/traces/simu-mardi.trace") -> x;
})
#+end_src

#+RESULTS:

#+begin_src R :results output :session :exports both
str(x)
#+end_src

#+RESULTS:
#+begin_example
List of 4
 $ :'data.frame':	40860 obs. of  8 variables:
  ..$ Nature     : Factor w/ 1 level "State": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ Container  : Factor w/ 51 levels "node0","node1",..: 27 27 27 27 27 27 27 27 27 27 ...
  ..$ Type       : Factor w/ 2 levels "PM","SERVICE": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ Start      : num [1:40860] 100 222 256 268 291 303 425 503 515 538 ...
  ..$ End        : num [1:40860] 222 256 268 291 303 425 503 515 538 554 ...
  ..$ Duration   : num [1:40860] 122 34 12 23 12 122 78 12 23 16 ...
  ..$ Imbrication: int [1:40860] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ Value      : Factor w/ 8 levels "booked","compute",..: 4 4 4 4 4 4 4 4 4 4 ...
 $ :'data.frame':	1521 obs. of  7 variables:
  ..$ Nature   : Factor w/ 1 level "Variable": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ Container: Factor w/ 304 levels "my_cluster_1_backbone",..: 57 57 54 54 55 55 52 52 53 53 ...
  ..$ Type     : Factor w/ 3 levels "bandwidth","latency",..: 1 2 1 2 1 2 1 2 1 2 ...
  ..$ Start    : num [1:1521] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ End      : num [1:1521] 1205 1205 1205 1205 1205 ...
  ..$ Duration : num [1:1521] 1205 1205 1205 1205 1205 ...
  ..$ Value    : num [1:1521] 1.25e+08 5.00e-05 1.25e+08 5.00e-05 1.25e+08 ...
 $ :'data.frame':	0 obs. of  5 variables:
  ..$ Nature   : Factor w/ 0 levels: 
  ..$ Container: Factor w/ 0 levels: 
  ..$ Type     : Factor w/ 0 levels: 
  ..$ Start    : num(0) 
  ..$ Value    : Factor w/ 0 levels: 
 $ :'data.frame':	1215 obs. of  10 variables:
  ..$ Nature        : Factor w/ 1 level "State": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ Container     : Factor w/ 1 level "my_cluster_1": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ Type          : Factor w/ 4 levels "L1-HOST2-LINK4",..: 2 2 2 2 2 2 2 2 2 2 ...
  ..$ Start         : num [1:1215] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ End           : num [1:1215] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ Duration      : num [1:1215] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ Value         : Factor w/ 1 level "G": 1 1 1 1 1 1 1 1 1 1 ...
  ..$ StartContainer: Factor w/ 304 levels "my_cluster_1_backbone",..: 32 34 36 38 40 42 44 46 48 52 ...
  ..$ EndContainer  : Factor w/ 305 levels "my_cluster_1_backbone",..: 219 220 221 222 223 224 225 226 227 229 ...
  ..$ Key           : Factor w/ 1 level "No Key": 1 1 1 1 1 1 1 1 1 1 ...
#+end_example

